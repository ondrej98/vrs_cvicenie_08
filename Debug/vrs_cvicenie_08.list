
vrs_cvicenie_08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001334  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080014bc  080014bc  000114bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014e4  080014e4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080014e4  080014e4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014e4  080014e4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014e4  080014e4  000114e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014e8  080014e8  000114e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080014ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000030  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008049  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001691  00000000  00000000  0002807d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000550  00000000  00000000  00029710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004a8  00000000  00000000  00029c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001664e  00000000  00000000  0002a108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005386  00000000  00000000  00040756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077495  00000000  00000000  00045adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000bcf71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001408  00000000  00000000  000bcfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080014a4 	.word	0x080014a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080014a4 	.word	0x080014a4

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <resetSegments>:
extern DisplayDigitData_ DisplayDigit_0;
extern DisplayDigitData_ DisplayDigit_1;
extern DisplayDigitData_ DisplayDigit_2;
extern DisplayDigitData_ DisplayDigit_3;
static uint8_t indexer = 0;
void resetSegments(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	SEGMENT_A_OFF;
 8000204:	2102      	movs	r1, #2
 8000206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020a:	f7ff ffdd 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_B_OFF;
 800020e:	2101      	movs	r1, #1
 8000210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000214:	f7ff ffd8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_C_OFF;
 8000218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800021c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000220:	f7ff ffd2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_D_OFF;
 8000224:	2120      	movs	r1, #32
 8000226:	480c      	ldr	r0, [pc, #48]	; (8000258 <resetSegments+0x58>)
 8000228:	f7ff ffce 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_E_OFF;
 800022c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000234:	f7ff ffc8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_F_OFF;
 8000238:	2108      	movs	r1, #8
 800023a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023e:	f7ff ffc3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_G_OFF;
 8000242:	2110      	movs	r1, #16
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <resetSegments+0x58>)
 8000246:	f7ff ffbf 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_DP_OFF;
 800024a:	2102      	movs	r1, #2
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <resetSegments+0x58>)
 800024e:	f7ff ffbb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	48000400 	.word	0x48000400

0800025c <resetDigits>:
	SEGMENT_F_ON;
	SEGMENT_G_ON;
	SEGMENT_DP_ON;
}

void resetDigits(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	DIGIT_0_OFF;
 8000260:	2120      	movs	r1, #32
 8000262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000266:	f7ff ffbd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	DIGIT_1_OFF;
 800026a:	2110      	movs	r1, #16
 800026c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000270:	f7ff ffb8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	DIGIT_2_OFF;
 8000274:	2140      	movs	r1, #64	; 0x40
 8000276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027a:	f7ff ffb3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	DIGIT_3_OFF;
 800027e:	2104      	movs	r1, #4
 8000280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000284:	f7ff ffae 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	DIGIT_TIME_OFF;
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028e:	f7ff ffa9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <segmentsOn>:
	DIGIT_2_ON;
	DIGIT_3_ON;
	DIGIT_TIME_ON;
}

void segmentsOn(uint8_t index, SegmentDigitStruct digitStruct) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	e883 0006 	stmia.w	r3, {r1, r2}
 80002a4:	4603      	mov	r3, r0
 80002a6:	73fb      	strb	r3, [r7, #15]
//	resetSegments();
	if (digitStruct.sA)
 80002a8:	793b      	ldrb	r3, [r7, #4]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d005      	beq.n	80002ba <segmentsOn+0x22>
		SEGMENT_A_ON;
 80002ae:	2102      	movs	r1, #2
 80002b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b4:	f7ff ff96 	bl	80001e4 <LL_GPIO_ResetOutputPin>
 80002b8:	e004      	b.n	80002c4 <segmentsOn+0x2c>
	else SEGMENT_A_OFF;
 80002ba:	2102      	movs	r1, #2
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c0:	f7ff ff82 	bl	80001c8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sB)
 80002c4:	797b      	ldrb	r3, [r7, #5]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d005      	beq.n	80002d6 <segmentsOn+0x3e>
		SEGMENT_B_ON;
 80002ca:	2101      	movs	r1, #1
 80002cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d0:	f7ff ff88 	bl	80001e4 <LL_GPIO_ResetOutputPin>
 80002d4:	e004      	b.n	80002e0 <segmentsOn+0x48>
	else SEGMENT_B_OFF;
 80002d6:	2101      	movs	r1, #1
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f7ff ff74 	bl	80001c8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sC)
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d006      	beq.n	80002f4 <segmentsOn+0x5c>
		SEGMENT_C_ON;
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ee:	f7ff ff79 	bl	80001e4 <LL_GPIO_ResetOutputPin>
 80002f2:	e005      	b.n	8000300 <segmentsOn+0x68>
	else SEGMENT_C_OFF;
 80002f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fc:	f7ff ff64 	bl	80001c8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sD)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d004      	beq.n	8000310 <segmentsOn+0x78>
		SEGMENT_D_ON;
 8000306:	2120      	movs	r1, #32
 8000308:	4833      	ldr	r0, [pc, #204]	; (80003d8 <segmentsOn+0x140>)
 800030a:	f7ff ff6b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
 800030e:	e003      	b.n	8000318 <segmentsOn+0x80>
	else SEGMENT_D_OFF;
 8000310:	2120      	movs	r1, #32
 8000312:	4831      	ldr	r0, [pc, #196]	; (80003d8 <segmentsOn+0x140>)
 8000314:	f7ff ff58 	bl	80001c8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sE)
 8000318:	7a3b      	ldrb	r3, [r7, #8]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d006      	beq.n	800032c <segmentsOn+0x94>
		SEGMENT_E_ON;
 800031e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000326:	f7ff ff5d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
 800032a:	e005      	b.n	8000338 <segmentsOn+0xa0>
	else SEGMENT_E_OFF;
 800032c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000334:	f7ff ff48 	bl	80001c8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sF)
 8000338:	7a7b      	ldrb	r3, [r7, #9]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d005      	beq.n	800034a <segmentsOn+0xb2>
		SEGMENT_F_ON;
 800033e:	2108      	movs	r1, #8
 8000340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000344:	f7ff ff4e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
 8000348:	e004      	b.n	8000354 <segmentsOn+0xbc>
	else SEGMENT_F_OFF;
 800034a:	2108      	movs	r1, #8
 800034c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000350:	f7ff ff3a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sG)
 8000354:	7abb      	ldrb	r3, [r7, #10]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d004      	beq.n	8000364 <segmentsOn+0xcc>
		SEGMENT_G_ON;
 800035a:	2110      	movs	r1, #16
 800035c:	481e      	ldr	r0, [pc, #120]	; (80003d8 <segmentsOn+0x140>)
 800035e:	f7ff ff41 	bl	80001e4 <LL_GPIO_ResetOutputPin>
 8000362:	e003      	b.n	800036c <segmentsOn+0xd4>
	else SEGMENT_G_OFF;
 8000364:	2110      	movs	r1, #16
 8000366:	481c      	ldr	r0, [pc, #112]	; (80003d8 <segmentsOn+0x140>)
 8000368:	f7ff ff2e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sDot)
 800036c:	7afb      	ldrb	r3, [r7, #11]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d004      	beq.n	800037c <segmentsOn+0xe4>
		SEGMENT_DP_ON;
 8000372:	2102      	movs	r1, #2
 8000374:	4818      	ldr	r0, [pc, #96]	; (80003d8 <segmentsOn+0x140>)
 8000376:	f7ff ff35 	bl	80001e4 <LL_GPIO_ResetOutputPin>
 800037a:	e003      	b.n	8000384 <segmentsOn+0xec>
	else SEGMENT_DP_OFF;
 800037c:	2102      	movs	r1, #2
 800037e:	4816      	ldr	r0, [pc, #88]	; (80003d8 <segmentsOn+0x140>)
 8000380:	f7ff ff22 	bl	80001c8 <LL_GPIO_SetOutputPin>

	resetDigits();
 8000384:	f7ff ff6a 	bl	800025c <resetDigits>
	if (index == 0)
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d105      	bne.n	800039a <segmentsOn+0x102>
		DIGIT_0_ON;
 800038e:	2120      	movs	r1, #32
 8000390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000394:	f7ff ff18 	bl	80001c8 <LL_GPIO_SetOutputPin>
		DIGIT_1_ON;
	else if (index == 2)
		DIGIT_2_ON;
	else if (index == 3)
		DIGIT_3_ON;
}
 8000398:	e019      	b.n	80003ce <segmentsOn+0x136>
	else if (index == 1)
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d105      	bne.n	80003ac <segmentsOn+0x114>
		DIGIT_1_ON;
 80003a0:	2110      	movs	r1, #16
 80003a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a6:	f7ff ff0f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80003aa:	e010      	b.n	80003ce <segmentsOn+0x136>
	else if (index == 2)
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d105      	bne.n	80003be <segmentsOn+0x126>
		DIGIT_2_ON;
 80003b2:	2140      	movs	r1, #64	; 0x40
 80003b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b8:	f7ff ff06 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80003bc:	e007      	b.n	80003ce <segmentsOn+0x136>
	else if (index == 3)
 80003be:	7bfb      	ldrb	r3, [r7, #15]
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	d104      	bne.n	80003ce <segmentsOn+0x136>
		DIGIT_3_ON;
 80003c4:	2104      	movs	r1, #4
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ca:	f7ff fefd 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	48000400 	.word	0x48000400

080003dc <displayCharOnDigit>:

void displayCharOnDigit(DisplayDigitData_ digitData) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	80b8      	strh	r0, [r7, #4]
	SegmentDigitStruct digitStruct = GetSegmentDigit(digitData.chr);
 80003e4:	797a      	ldrb	r2, [r7, #5]
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	4611      	mov	r1, r2
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 f879 	bl	80004e4 <GetSegmentDigit>
	segmentsOn(digitData.index, digitStruct);
 80003f2:	7938      	ldrb	r0, [r7, #4]
 80003f4:	f107 0308 	add.w	r3, r7, #8
 80003f8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80003fc:	f7ff ff4c 	bl	8000298 <segmentsOn>
}
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <updateDisplay>:
void updateDisplay(void) {
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0

	switch (indexer) {
 800040c:	4b30      	ldr	r3, [pc, #192]	; (80004d0 <updateDisplay+0xc8>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b03      	cmp	r3, #3
 8000412:	d80b      	bhi.n	800042c <updateDisplay+0x24>
 8000414:	a201      	add	r2, pc, #4	; (adr r2, 800041c <updateDisplay+0x14>)
 8000416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041a:	bf00      	nop
 800041c:	0800043d 	.word	0x0800043d
 8000420:	08000461 	.word	0x08000461
 8000424:	08000485 	.word	0x08000485
 8000428:	080004a9 	.word	0x080004a9
	default:
		resetDigits();
 800042c:	f7ff ff16 	bl	800025c <resetDigits>
		resetSegments();
 8000430:	f7ff fee6 	bl	8000200 <resetSegments>
		indexer = 0;
 8000434:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <updateDisplay+0xc8>)
 8000436:	2200      	movs	r2, #0
 8000438:	701a      	strb	r2, [r3, #0]
		break;
 800043a:	e047      	b.n	80004cc <updateDisplay+0xc4>
	case 0:
		displayCharOnDigit(DisplayDigit_0);
 800043c:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <updateDisplay+0xcc>)
 800043e:	781a      	ldrb	r2, [r3, #0]
 8000440:	785b      	ldrb	r3, [r3, #1]
 8000442:	021b      	lsls	r3, r3, #8
 8000444:	431a      	orrs	r2, r3
 8000446:	2300      	movs	r3, #0
 8000448:	f362 030f 	bfi	r3, r2, #0, #16
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ffc5 	bl	80003dc <displayCharOnDigit>
		indexer++;
 8000452:	4b1f      	ldr	r3, [pc, #124]	; (80004d0 <updateDisplay+0xc8>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	b2da      	uxtb	r2, r3
 800045a:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <updateDisplay+0xc8>)
 800045c:	701a      	strb	r2, [r3, #0]
		break;
 800045e:	e035      	b.n	80004cc <updateDisplay+0xc4>
	case 1:
		displayCharOnDigit(DisplayDigit_1);
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <updateDisplay+0xd0>)
 8000462:	781a      	ldrb	r2, [r3, #0]
 8000464:	785b      	ldrb	r3, [r3, #1]
 8000466:	021b      	lsls	r3, r3, #8
 8000468:	431a      	orrs	r2, r3
 800046a:	2300      	movs	r3, #0
 800046c:	f362 030f 	bfi	r3, r2, #0, #16
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ffb3 	bl	80003dc <displayCharOnDigit>
		indexer++;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <updateDisplay+0xc8>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	3301      	adds	r3, #1
 800047c:	b2da      	uxtb	r2, r3
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <updateDisplay+0xc8>)
 8000480:	701a      	strb	r2, [r3, #0]
		break;
 8000482:	e023      	b.n	80004cc <updateDisplay+0xc4>
	case 2:
		displayCharOnDigit(DisplayDigit_2);
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <updateDisplay+0xd4>)
 8000486:	781a      	ldrb	r2, [r3, #0]
 8000488:	785b      	ldrb	r3, [r3, #1]
 800048a:	021b      	lsls	r3, r3, #8
 800048c:	431a      	orrs	r2, r3
 800048e:	2300      	movs	r3, #0
 8000490:	f362 030f 	bfi	r3, r2, #0, #16
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ffa1 	bl	80003dc <displayCharOnDigit>
		indexer++;
 800049a:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <updateDisplay+0xc8>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	3301      	adds	r3, #1
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <updateDisplay+0xc8>)
 80004a4:	701a      	strb	r2, [r3, #0]
		break;
 80004a6:	e011      	b.n	80004cc <updateDisplay+0xc4>
	case 3:
		displayCharOnDigit(DisplayDigit_3);
 80004a8:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <updateDisplay+0xd8>)
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	785b      	ldrb	r3, [r3, #1]
 80004ae:	021b      	lsls	r3, r3, #8
 80004b0:	431a      	orrs	r2, r3
 80004b2:	2300      	movs	r3, #0
 80004b4:	f362 030f 	bfi	r3, r2, #0, #16
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ff8f 	bl	80003dc <displayCharOnDigit>
		indexer++;
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <updateDisplay+0xc8>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	3301      	adds	r3, #1
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b02      	ldr	r3, [pc, #8]	; (80004d0 <updateDisplay+0xc8>)
 80004c8:	701a      	strb	r2, [r3, #0]
		break;
 80004ca:	bf00      	nop

	}
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000020 	.word	0x20000020
 80004d4:	20000030 	.word	0x20000030
 80004d8:	20000028 	.word	0x20000028
 80004dc:	20000024 	.word	0x20000024
 80004e0:	2000002c 	.word	0x2000002c

080004e4 <GetSegmentDigit>:
		0x3B, // Y
		0x6D, // Z*
		0x08, // _
		};

SegmentDigitStruct GetSegmentDigit(uint8_t chr) {
 80004e4:	b480      	push	{r7}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
	SegmentDigitStruct result;
	if ((chr >= '0' && chr <= '9') || (chr >= 'A' && chr <= 'Z')
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	2b2f      	cmp	r3, #47	; 0x2f
 80004f4:	d902      	bls.n	80004fc <GetSegmentDigit+0x18>
 80004f6:	78fb      	ldrb	r3, [r7, #3]
 80004f8:	2b39      	cmp	r3, #57	; 0x39
 80004fa:	d908      	bls.n	800050e <GetSegmentDigit+0x2a>
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	2b40      	cmp	r3, #64	; 0x40
 8000500:	d902      	bls.n	8000508 <GetSegmentDigit+0x24>
 8000502:	78fb      	ldrb	r3, [r7, #3]
 8000504:	2b5a      	cmp	r3, #90	; 0x5a
 8000506:	d902      	bls.n	800050e <GetSegmentDigit+0x2a>
			|| chr == '_') {
 8000508:	78fb      	ldrb	r3, [r7, #3]
 800050a:	2b5f      	cmp	r3, #95	; 0x5f
 800050c:	d176      	bne.n	80005fc <GetSegmentDigit+0x118>
		uint8_t fontChar = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	75fb      	strb	r3, [r7, #23]
		uint8_t index = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	75bb      	strb	r3, [r7, #22]
		if (chr >= '0' && chr <= '9') {
 8000516:	78fb      	ldrb	r3, [r7, #3]
 8000518:	2b2f      	cmp	r3, #47	; 0x2f
 800051a:	d90a      	bls.n	8000532 <GetSegmentDigit+0x4e>
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	2b39      	cmp	r3, #57	; 0x39
 8000520:	d807      	bhi.n	8000532 <GetSegmentDigit+0x4e>
			index = chr - '0';
 8000522:	78fb      	ldrb	r3, [r7, #3]
 8000524:	3b30      	subs	r3, #48	; 0x30
 8000526:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_DIGITS_START + index];
 8000528:	7dbb      	ldrb	r3, [r7, #22]
 800052a:	4a43      	ldr	r2, [pc, #268]	; (8000638 <GetSegmentDigit+0x154>)
 800052c:	5cd3      	ldrb	r3, [r2, r3]
 800052e:	75fb      	strb	r3, [r7, #23]
 8000530:	e013      	b.n	800055a <GetSegmentDigit+0x76>
		} else if (chr >= 'A' && chr <= 'Z') {
 8000532:	78fb      	ldrb	r3, [r7, #3]
 8000534:	2b40      	cmp	r3, #64	; 0x40
 8000536:	d90b      	bls.n	8000550 <GetSegmentDigit+0x6c>
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	2b5a      	cmp	r3, #90	; 0x5a
 800053c:	d808      	bhi.n	8000550 <GetSegmentDigit+0x6c>
			index = chr - 'A';
 800053e:	78fb      	ldrb	r3, [r7, #3]
 8000540:	3b41      	subs	r3, #65	; 0x41
 8000542:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_CHARS_START + index];
 8000544:	7dbb      	ldrb	r3, [r7, #22]
 8000546:	330a      	adds	r3, #10
 8000548:	4a3b      	ldr	r2, [pc, #236]	; (8000638 <GetSegmentDigit+0x154>)
 800054a:	5cd3      	ldrb	r3, [r2, r3]
 800054c:	75fb      	strb	r3, [r7, #23]
 800054e:	e004      	b.n	800055a <GetSegmentDigit+0x76>
		} else if (chr == '_') {
 8000550:	78fb      	ldrb	r3, [r7, #3]
 8000552:	2b5f      	cmp	r3, #95	; 0x5f
 8000554:	d101      	bne.n	800055a <GetSegmentDigit+0x76>
			fontChar = Font_Table[FONTS_UNDERSCORE];
 8000556:	2308      	movs	r3, #8
 8000558:	75fb      	strb	r3, [r7, #23]
		}
		result.sA = fontChar & ConverterValue_SegmentA ? true : false;
 800055a:	2240      	movs	r2, #64	; 0x40
 800055c:	7dfb      	ldrb	r3, [r7, #23]
 800055e:	4013      	ands	r3, r2
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	bf14      	ite	ne
 8000566:	2301      	movne	r3, #1
 8000568:	2300      	moveq	r3, #0
 800056a:	b2db      	uxtb	r3, r3
 800056c:	733b      	strb	r3, [r7, #12]
		result.sB = fontChar & ConverterValue_SegmentB ? true : false;
 800056e:	2220      	movs	r2, #32
 8000570:	7dfb      	ldrb	r3, [r7, #23]
 8000572:	4013      	ands	r3, r2
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	bf14      	ite	ne
 800057a:	2301      	movne	r3, #1
 800057c:	2300      	moveq	r3, #0
 800057e:	b2db      	uxtb	r3, r3
 8000580:	737b      	strb	r3, [r7, #13]
		result.sC = fontChar & ConverterValue_SegmentC ? true : false;
 8000582:	2210      	movs	r2, #16
 8000584:	7dfb      	ldrb	r3, [r7, #23]
 8000586:	4013      	ands	r3, r2
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf14      	ite	ne
 800058e:	2301      	movne	r3, #1
 8000590:	2300      	moveq	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	73bb      	strb	r3, [r7, #14]
		result.sD = fontChar & ConverterValue_SegmentD ? true : false;
 8000596:	2208      	movs	r2, #8
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	4013      	ands	r3, r2
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	bf14      	ite	ne
 80005a2:	2301      	movne	r3, #1
 80005a4:	2300      	moveq	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	73fb      	strb	r3, [r7, #15]
		result.sE = fontChar & ConverterValue_SegmentE ? true : false;
 80005aa:	2204      	movs	r2, #4
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	4013      	ands	r3, r2
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf14      	ite	ne
 80005b6:	2301      	movne	r3, #1
 80005b8:	2300      	moveq	r3, #0
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	743b      	strb	r3, [r7, #16]
		result.sF = fontChar & ConverterValue_SegmentF ? true : false;
 80005be:	2202      	movs	r2, #2
 80005c0:	7dfb      	ldrb	r3, [r7, #23]
 80005c2:	4013      	ands	r3, r2
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	bf14      	ite	ne
 80005ca:	2301      	movne	r3, #1
 80005cc:	2300      	moveq	r3, #0
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	747b      	strb	r3, [r7, #17]
		result.sG = fontChar & ConverterValue_SegmentG ? true : false;
 80005d2:	2201      	movs	r2, #1
 80005d4:	7dfb      	ldrb	r3, [r7, #23]
 80005d6:	4013      	ands	r3, r2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	bf14      	ite	ne
 80005de:	2301      	movne	r3, #1
 80005e0:	2300      	moveq	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	74bb      	strb	r3, [r7, #18]
		result.sDot = fontChar & ConverterValue_SegmentDot ? true : false;
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	7dfb      	ldrb	r3, [r7, #23]
 80005ea:	4013      	ands	r3, r2
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	bf14      	ite	ne
 80005f2:	2301      	movne	r3, #1
 80005f4:	2300      	moveq	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	74fb      	strb	r3, [r7, #19]
			|| chr == '_') {
 80005fa:	e00f      	b.n	800061c <GetSegmentDigit+0x138>
	}
	else{
		result.sA = true;
 80005fc:	2301      	movs	r3, #1
 80005fe:	733b      	strb	r3, [r7, #12]
		result.sB = true;
 8000600:	2301      	movs	r3, #1
 8000602:	737b      	strb	r3, [r7, #13]
		result.sC = true;
 8000604:	2301      	movs	r3, #1
 8000606:	73bb      	strb	r3, [r7, #14]
		result.sD = true;
 8000608:	2301      	movs	r3, #1
 800060a:	73fb      	strb	r3, [r7, #15]
		result.sE = true;
 800060c:	2301      	movs	r3, #1
 800060e:	743b      	strb	r3, [r7, #16]
		result.sF = true;
 8000610:	2301      	movs	r3, #1
 8000612:	747b      	strb	r3, [r7, #17]
		result.sG = true;
 8000614:	2301      	movs	r3, #1
 8000616:	74bb      	strb	r3, [r7, #18]
		result.sDot = true;
 8000618:	2301      	movs	r3, #1
 800061a:	74fb      	strb	r3, [r7, #19]
	}
	return result;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	461a      	mov	r2, r3
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	cb03      	ldmia	r3!, {r0, r1}
 8000626:	6010      	str	r0, [r2, #0]
 8000628:	6051      	str	r1, [r2, #4]
}
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	371c      	adds	r7, #28
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	080014bc 	.word	0x080014bc

0800063c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	4907      	ldr	r1, [pc, #28]	; (8000668 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4313      	orrs	r3, r2
 800064e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000652:	695a      	ldr	r2, [r3, #20]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4013      	ands	r3, r2
 8000658:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40021000 	.word	0x40021000

0800066c <LL_GPIO_ResetOutputPin>:
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	463b      	mov	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
 800069c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800069e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80006a2:	f7ff ffcb 	bl	800063c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80006a6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80006aa:	f7ff ffc7 	bl	800063c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80006ae:	f640 11ff 	movw	r1, #2559	; 0x9ff
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b6:	f7ff ffd9 	bl	800066c <LL_GPIO_ResetOutputPin>
                          |D_1_Pin|D_0_Pin|D_2_Pin|D_T_Pin
                          |S_C_Pin|S_E_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, S_DP_Pin|S_G_Pin|S_D_Pin);
 80006ba:	2132      	movs	r1, #50	; 0x32
 80006bc:	4813      	ldr	r0, [pc, #76]	; (800070c <MX_GPIO_Init+0x84>)
 80006be:	f7ff ffd5 	bl	800066c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80006c2:	f640 13ff 	movw	r3, #2559	; 0x9ff
 80006c6:	603b      	str	r3, [r7, #0]
                          |D_1_Pin|D_0_Pin|D_2_Pin|D_T_Pin
                          |S_C_Pin|S_E_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006c8:	2301      	movs	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f000 fd42 	bl	8001168 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = S_DP_Pin|S_G_Pin|S_D_Pin;
 80006e4:	2332      	movs	r3, #50	; 0x32
 80006e6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006e8:	2301      	movs	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <MX_GPIO_Init+0x84>)
 80006fe:	f000 fd33 	bl	8001168 <LL_GPIO_Init>

}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	48000400 	.word	0x48000400

08000710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	60d3      	str	r3, [r2, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <__NVIC_GetPriorityGrouping+0x18>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	f003 0307 	and.w	r3, r3, #7
}
 8000766:	4618      	mov	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f1c3 0307 	rsb	r3, r3, #7
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	bf28      	it	cs
 80007e6:	2304      	movcs	r3, #4
 80007e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3304      	adds	r3, #4
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	d902      	bls.n	80007f8 <NVIC_EncodePriority+0x30>
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3b03      	subs	r3, #3
 80007f6:	e000      	b.n	80007fa <NVIC_EncodePriority+0x32>
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43da      	mvns	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	401a      	ands	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000810:	f04f 31ff 	mov.w	r1, #4294967295
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43d9      	mvns	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	4313      	orrs	r3, r2
         );
}
 8000822:	4618      	mov	r0, r3
 8000824:	3724      	adds	r7, #36	; 0x24
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <LL_RCC_HSI_Enable+0x1c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <LL_RCC_HSI_Enable+0x1c>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <LL_RCC_HSI_IsReady+0x20>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	2b02      	cmp	r3, #2
 800085e:	bf0c      	ite	eq
 8000860:	2301      	moveq	r3, #1
 8000862:	2300      	movne	r3, #0
 8000864:	b2db      	uxtb	r3, r3
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	40021000 	.word	0x40021000

08000874 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	4904      	ldr	r1, [pc, #16]	; (800089c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800088a:	4313      	orrs	r3, r2
 800088c:	600b      	str	r3, [r1, #0]
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <LL_RCC_SetSysClkSource+0x24>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f023 0203 	bic.w	r2, r3, #3
 80008b0:	4904      	ldr	r1, [pc, #16]	; (80008c4 <LL_RCC_SetSysClkSource+0x24>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	604b      	str	r3, [r1, #4]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	40021000 	.word	0x40021000

080008c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <LL_RCC_GetSysClkSource+0x18>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 030c 	and.w	r3, r3, #12
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000

080008e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <LL_RCC_SetAHBPrescaler+0x24>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80008f4:	4904      	ldr	r1, [pc, #16]	; (8000908 <LL_RCC_SetAHBPrescaler+0x24>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	604b      	str	r3, [r1, #4]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	40021000 	.word	0x40021000

0800090c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800091c:	4904      	ldr	r1, [pc, #16]	; (8000930 <LL_RCC_SetAPB1Prescaler+0x24>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4313      	orrs	r3, r2
 8000922:	604b      	str	r3, [r1, #4]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	40021000 	.word	0x40021000

08000934 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <LL_RCC_SetAPB2Prescaler+0x24>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000944:	4904      	ldr	r1, [pc, #16]	; (8000958 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4313      	orrs	r3, r2
 800094a:	604b      	str	r3, [r1, #4]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	40021000 	.word	0x40021000

0800095c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000966:	69da      	ldr	r2, [r3, #28]
 8000968:	4907      	ldr	r1, [pc, #28]	; (8000988 <LL_APB1_GRP1_EnableClock+0x2c>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4313      	orrs	r3, r2
 800096e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000972:	69da      	ldr	r2, [r3, #28]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4013      	ands	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	40021000 	.word	0x40021000

0800098c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000996:	699a      	ldr	r2, [r3, #24]
 8000998:	4907      	ldr	r1, [pc, #28]	; (80009b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4313      	orrs	r3, r2
 800099e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009a2:	699a      	ldr	r2, [r3, #24]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4013      	ands	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	40021000 	.word	0x40021000

080009bc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <LL_FLASH_SetLatency+0x24>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f023 0207 	bic.w	r2, r3, #7
 80009cc:	4904      	ldr	r1, [pc, #16]	; (80009e0 <LL_FLASH_SetLatency+0x24>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	600b      	str	r3, [r1, #0]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	40022000 	.word	0x40022000

080009e4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <LL_FLASH_GetLatency+0x18>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 0307 	and.w	r3, r3, #7
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40022000 	.word	0x40022000

08000a00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	DisplayDigit_0.index = 0;
 8000a04:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <main+0xb8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
	DisplayDigit_0.chr = 0;
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <main+0xb8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	705a      	strb	r2, [r3, #1]
	DisplayDigit_1.index = 1;
 8000a10:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <main+0xbc>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
	DisplayDigit_1.chr = 0;
 8000a16:	4b29      	ldr	r3, [pc, #164]	; (8000abc <main+0xbc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	705a      	strb	r2, [r3, #1]
	DisplayDigit_2.index = 2;
 8000a1c:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <main+0xc0>)
 8000a1e:	2202      	movs	r2, #2
 8000a20:	701a      	strb	r2, [r3, #0]
	DisplayDigit_2.chr = 0;
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <main+0xc0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	705a      	strb	r2, [r3, #1]
	DisplayDigit_3.index = 3;
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <main+0xc4>)
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	701a      	strb	r2, [r3, #0]
	DisplayDigit_3.chr = 0;
 8000a2e:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <main+0xc4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	705a      	strb	r2, [r3, #1]

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff ffa9 	bl	800098c <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a3a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000a3e:	f7ff ff8d 	bl	800095c <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a42:	2003      	movs	r0, #3
 8000a44:	f7ff fe64 	bl	8000710 <__NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn,
 8000a48:	f7ff fe86 	bl	8000758 <__NVIC_GetPriorityGrouping>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2200      	movs	r2, #0
 8000a50:	210f      	movs	r1, #15
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff feb8 	bl	80007c8 <NVIC_EncodePriority>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f7ff fe88 	bl	8000774 <__NVIC_SetPriority>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a64:	f000 f830 	bl	8000ac8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a68:	f7ff fe0e 	bl	8000688 <MX_GPIO_Init>
	MX_TIM6_Init();
 8000a6c:	f000 f9ce 	bl	8000e0c <MX_TIM6_Init>
	MX_TIM7_Init();
 8000a70:	f000 fa0c 	bl	8000e8c <MX_TIM7_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		LL_mDelay(10000);
 8000a74:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a78:	f000 fcba 	bl	80013f0 <LL_mDelay>
		DisplayDigit_0.chr = 'A';
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <main+0xb8>)
 8000a7e:	2241      	movs	r2, #65	; 0x41
 8000a80:	705a      	strb	r2, [r3, #1]
		DisplayDigit_1.chr = '0';
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <main+0xbc>)
 8000a84:	2230      	movs	r2, #48	; 0x30
 8000a86:	705a      	strb	r2, [r3, #1]
		DisplayDigit_2.chr = '_';
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <main+0xc0>)
 8000a8a:	225f      	movs	r2, #95	; 0x5f
 8000a8c:	705a      	strb	r2, [r3, #1]
		DisplayDigit_3.chr = 'K';
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <main+0xc4>)
 8000a90:	224b      	movs	r2, #75	; 0x4b
 8000a92:	705a      	strb	r2, [r3, #1]
		LL_mDelay(10000);
 8000a94:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a98:	f000 fcaa 	bl	80013f0 <LL_mDelay>
		DisplayDigit_0.chr = '9';
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <main+0xb8>)
 8000a9e:	2239      	movs	r2, #57	; 0x39
 8000aa0:	705a      	strb	r2, [r3, #1]
		DisplayDigit_1.chr = 'X';
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <main+0xbc>)
 8000aa4:	2258      	movs	r2, #88	; 0x58
 8000aa6:	705a      	strb	r2, [r3, #1]
		DisplayDigit_2.chr = '_';
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <main+0xc0>)
 8000aaa:	225f      	movs	r2, #95	; 0x5f
 8000aac:	705a      	strb	r2, [r3, #1]
		DisplayDigit_3.chr = '0';
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <main+0xc4>)
 8000ab0:	2230      	movs	r2, #48	; 0x30
 8000ab2:	705a      	strb	r2, [r3, #1]
		LL_mDelay(10000);
 8000ab4:	e7de      	b.n	8000a74 <main+0x74>
 8000ab6:	bf00      	nop
 8000ab8:	20000030 	.word	0x20000030
 8000abc:	20000028 	.word	0x20000028
 8000ac0:	20000024 	.word	0x20000024
 8000ac4:	2000002c 	.word	0x2000002c

08000ac8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff ff75 	bl	80009bc <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 8000ad2:	bf00      	nop
 8000ad4:	f7ff ff86 	bl	80009e4 <LL_FLASH_GetLatency>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1fa      	bne.n	8000ad4 <SystemClock_Config+0xc>
	}
	LL_RCC_HSI_Enable();
 8000ade:	f7ff fea7 	bl	8000830 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 8000ae2:	bf00      	nop
 8000ae4:	f7ff feb4 	bl	8000850 <LL_RCC_HSI_IsReady>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d1fa      	bne.n	8000ae4 <SystemClock_Config+0x1c>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8000aee:	2010      	movs	r0, #16
 8000af0:	f7ff fec0 	bl	8000874 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f7ff fef5 	bl	80008e4 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff ff06 	bl	800090c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f7ff ff17 	bl	8000934 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff feca 	bl	80008a0 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8000b0c:	bf00      	nop
 8000b0e:	f7ff fedb 	bl	80008c8 <LL_RCC_GetSysClkSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1fa      	bne.n	8000b0e <SystemClock_Config+0x46>

	}
	LL_Init1msTick(8000000);
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <SystemClock_Config+0x60>)
 8000b1a:	f000 fc5b 	bl	80013d4 <LL_Init1msTick>
	LL_SetSystemCoreClock(8000000);
 8000b1e:	4802      	ldr	r0, [pc, #8]	; (8000b28 <SystemClock_Config+0x60>)
 8000b20:	f000 fc8c 	bl	800143c <LL_SetSystemCoreClock>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	007a1200 	.word	0x007a1200

08000b2c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f06f 0201 	mvn.w	r2, #1
 8000b3a:	611a      	str	r2, [r3, #16]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d101      	bne.n	8000b60 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000b72:	e7fe      	b.n	8000b72 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000b78:	e7fe      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7a <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000b7e:	e7fe      	b.n	8000b7e <MemManage_Handler+0x4>

08000b80 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000b84:	e7fe      	b.n	8000b84 <BusFault_Handler+0x4>

08000b86 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000b8a:	e7fe      	b.n	8000b8a <UsageFault_Handler+0x4>

08000b8c <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <TIM6_DAC1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
 */
void TIM6_DAC1_IRQHandler(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC1_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6)) {
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <TIM6_DAC1_IRQHandler+0x20>)
 8000bca:	f7ff ffbd 	bl	8000b48 <LL_TIM_IsActiveFlag_UPDATE>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <TIM6_DAC1_IRQHandler+0x14>
		updateDisplay();
 8000bd4:	f7ff fc18 	bl	8000408 <updateDisplay>
	}
	/* USER CODE END TIM6_DAC1_IRQn 0 */

	/* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

	LL_TIM_ClearFlag_UPDATE(TIM6);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM6_DAC1_IRQHandler+0x20>)
 8000bda:	f7ff ffa7 	bl	8000b2c <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40001000 	.word	0x40001000

08000be8 <TIM7_DAC2_IRQHandler>:

/**
 * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
 */
void TIM7_DAC2_IRQHandler(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

	/* USER CODE END TIM7_DAC2_IRQn 0 */

	/* USER CODE BEGIN TIM7_DAC2_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM7);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM7_DAC2_IRQHandler+0x10>)
 8000bee:	f7ff ff9d 	bl	8000b2c <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40001400 	.word	0x40001400

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4907      	ldr	r1, [pc, #28]	; (8000c74 <__NVIC_EnableIRQ+0x38>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	; 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <LL_APB1_GRP1_EnableClock>:
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d3e:	69da      	ldr	r2, [r3, #28]
 8000d40:	4907      	ldr	r1, [pc, #28]	; (8000d60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d4a:	69da      	ldr	r2, [r3, #28]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	40021000 	.word	0x40021000

08000d64 <LL_TIM_EnableCounter>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f043 0201 	orr.w	r2, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	601a      	str	r2, [r3, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_TIM_DisableARRPreload>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	601a      	str	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <LL_TIM_SetTriggerOutput>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	605a      	str	r2, [r3, #4]
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <LL_TIM_DisableMasterSlaveMode>:
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	f043 0201 	orr.w	r2, r3, #1
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60da      	str	r2, [r3, #12]
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <MX_TIM6_Init>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8000e20:	2010      	movs	r0, #16
 8000e22:	f7ff ff87 	bl	8000d34 <LL_APB1_GRP1_EnableClock>

	/* TIM6 interrupt Init */
	NVIC_SetPriority(TIM6_DAC1_IRQn,
 8000e26:	f7ff fefb 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff4b 	bl	8000ccc <NVIC_EncodePriority>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	2036      	movs	r0, #54	; 0x36
 8000e3c:	f7ff ff1c 	bl	8000c78 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000e40:	2036      	movs	r0, #54	; 0x36
 8000e42:	f7ff fefb 	bl	8000c3c <__NVIC_EnableIRQ>

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	TIM_InitStruct.Prescaler = 7999;
 8000e46:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8000e4a:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 4;
 8000e50:	2304      	movs	r3, #4
 8000e52:	60fb      	str	r3, [r7, #12]
	LL_TIM_Init(TIM6, &TIM_InitStruct);
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <MX_TIM6_Init+0x7c>)
 8000e5a:	f000 fa2f 	bl	80012bc <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM6);
 8000e5e:	480a      	ldr	r0, [pc, #40]	; (8000e88 <MX_TIM6_Init+0x7c>)
 8000e60:	f7ff ff90 	bl	8000d84 <LL_TIM_DisableARRPreload>
	LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8000e64:	2100      	movs	r1, #0
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <MX_TIM6_Init+0x7c>)
 8000e68:	f7ff ff9c 	bl	8000da4 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM6);
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_TIM6_Init+0x7c>)
 8000e6e:	f7ff ffac 	bl	8000dca <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM6_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM6);
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_TIM6_Init+0x7c>)
 8000e74:	f7ff ffb9 	bl	8000dea <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM6);
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <MX_TIM6_Init+0x7c>)
 8000e7a:	f7ff ff73 	bl	8000d64 <LL_TIM_EnableCounter>
	/* USER CODE END TIM6_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40001000 	.word	0x40001000

08000e8c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8000ea0:	2020      	movs	r0, #32
 8000ea2:	f7ff ff47 	bl	8000d34 <LL_APB1_GRP1_EnableClock>

	/* TIM7 interrupt Init */
	NVIC_SetPriority(TIM7_DAC2_IRQn,
 8000ea6:	f7ff febb 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff0b 	bl	8000ccc <NVIC_EncodePriority>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	2037      	movs	r0, #55	; 0x37
 8000ebc:	f7ff fedc 	bl	8000c78 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8000ec0:	2037      	movs	r0, #55	; 0x37
 8000ec2:	f7ff febb 	bl	8000c3c <__NVIC_EnableIRQ>

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	TIM_InitStruct.Prescaler = 7999;
 8000ec6:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8000eca:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 499;
 8000ed0:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000ed4:	60fb      	str	r3, [r7, #12]
	LL_TIM_Init(TIM7, &TIM_InitStruct);
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480b      	ldr	r0, [pc, #44]	; (8000f08 <MX_TIM7_Init+0x7c>)
 8000edc:	f000 f9ee 	bl	80012bc <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM7);
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <MX_TIM7_Init+0x7c>)
 8000ee2:	f7ff ff4f 	bl	8000d84 <LL_TIM_DisableARRPreload>
	LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <MX_TIM7_Init+0x7c>)
 8000eea:	f7ff ff5b 	bl	8000da4 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM7);
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <MX_TIM7_Init+0x7c>)
 8000ef0:	f7ff ff6b 	bl	8000dca <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM7_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM7);
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_TIM7_Init+0x7c>)
 8000ef6:	f7ff ff78 	bl	8000dea <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM7);
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <MX_TIM7_Init+0x7c>)
 8000efc:	f7ff ff32 	bl	8000d64 <LL_TIM_EnableCounter>
	/* USER CODE END TIM7_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40001400 	.word	0x40001400

08000f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <LoopForever+0xe>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f28:	4c0b      	ldr	r4, [pc, #44]	; (8000f58 <LoopForever+0x16>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f36:	f7ff fe61 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f000 fa8f 	bl	800145c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f3e:	f7ff fd5f 	bl	8000a00 <main>

08000f42 <LoopForever>:

LoopForever:
    b LoopForever
 8000f42:	e7fe      	b.n	8000f42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f44:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000f50:	080014ec 	.word	0x080014ec
  ldr r2, =_sbss
 8000f54:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000f58:	20000034 	.word	0x20000034

08000f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_2_IRQHandler>

08000f5e <LL_GPIO_SetPinMode>:
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b089      	sub	sp, #36	; 0x24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	fab3 f383 	clz	r3, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2103      	movs	r1, #3
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa93 f3a3 	rbit	r3, r3
 8000f98:	61bb      	str	r3, [r7, #24]
  return result;
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	fab3 f383 	clz	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	431a      	orrs	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	3724      	adds	r7, #36	; 0x24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_GPIO_SetPinOutputType>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	fb01 f303 	mul.w	r3, r1, r3
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	605a      	str	r2, [r3, #4]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_GPIO_SetPinSpeed>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa93 f3a3 	rbit	r3, r3
 8001006:	613b      	str	r3, [r7, #16]
  return result;
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	fab3 f383 	clz	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2103      	movs	r1, #3
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	401a      	ands	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	61bb      	str	r3, [r7, #24]
  return result;
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fab3 f383 	clz	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	431a      	orrs	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	609a      	str	r2, [r3, #8]
}
 800103e:	bf00      	nop
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <LL_GPIO_SetPinPull>:
{
 800104a:	b480      	push	{r7}
 800104c:	b089      	sub	sp, #36	; 0x24
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	fa93 f3a3 	rbit	r3, r3
 8001064:	613b      	str	r3, [r7, #16]
  return result;
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	fab3 f383 	clz	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2103      	movs	r1, #3
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	401a      	ands	r2, r3
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	61bb      	str	r3, [r7, #24]
  return result;
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	fab3 f383 	clz	r3, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	431a      	orrs	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	60da      	str	r2, [r3, #12]
}
 800109c:	bf00      	nop
 800109e:	3724      	adds	r7, #36	; 0x24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_GPIO_SetAFPin_0_7>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6a1a      	ldr	r2, [r3, #32]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	613b      	str	r3, [r7, #16]
  return result;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	fab3 f383 	clz	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	210f      	movs	r1, #15
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	401a      	ands	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	61bb      	str	r3, [r7, #24]
  return result;
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	431a      	orrs	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	621a      	str	r2, [r3, #32]
}
 80010fa:	bf00      	nop
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_GPIO_SetAFPin_8_15>:
{
 8001106:	b480      	push	{r7}
 8001108:	b089      	sub	sp, #36	; 0x24
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	613b      	str	r3, [r7, #16]
  return result;
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	210f      	movs	r1, #15
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	401a      	ands	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	61bb      	str	r3, [r7, #24]
  return result;
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	fab3 f383 	clz	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	431a      	orrs	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800115c:	bf00      	nop
 800115e:	3724      	adds	r7, #36	; 0x24
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa93 f3a3 	rbit	r3, r3
 800117e:	613b      	str	r3, [r7, #16]
  return result;
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800118a:	e051      	b.n	8001230 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2101      	movs	r1, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d043      	beq.n	800122a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d003      	beq.n	80011b2 <LL_GPIO_Init+0x4a>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d10e      	bne.n	80011d0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	461a      	mov	r2, r3
 80011b8:	69b9      	ldr	r1, [r7, #24]
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ff16 	bl	8000fec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	6819      	ldr	r1, [r3, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	461a      	mov	r2, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff fef6 	bl	8000fbc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	461a      	mov	r2, r3
 80011d6:	69b9      	ldr	r1, [r7, #24]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff36 	bl	800104a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d11a      	bne.n	800121c <LL_GPIO_Init+0xb4>
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	fa93 f3a3 	rbit	r3, r3
 80011f0:	60bb      	str	r3, [r7, #8]
  return result;
 80011f2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80011f4:	fab3 f383 	clz	r3, r3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	d807      	bhi.n	800120e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	461a      	mov	r2, r3
 8001204:	69b9      	ldr	r1, [r7, #24]
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff4e 	bl	80010a8 <LL_GPIO_SetAFPin_0_7>
 800120c:	e006      	b.n	800121c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	461a      	mov	r2, r3
 8001214:	69b9      	ldr	r1, [r7, #24]
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff75 	bl	8001106 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	461a      	mov	r2, r3
 8001222:	69b9      	ldr	r1, [r7, #24]
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff fe9a 	bl	8000f5e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3301      	adds	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	fa22 f303 	lsr.w	r3, r2, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1a6      	bne.n	800118c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <LL_TIM_SetPrescaler>:
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_TIM_SetAutoReload>:
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_TIM_SetRepetitionCounter>:
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	615a      	str	r2, [r3, #20]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <LL_TIM_Init+0xd0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d007      	beq.n	80012e4 <LL_TIM_Init+0x28>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012da:	d003      	beq.n	80012e4 <LL_TIM_Init+0x28>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a2c      	ldr	r2, [pc, #176]	; (8001390 <LL_TIM_Init+0xd4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d106      	bne.n	80012f2 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a25      	ldr	r2, [pc, #148]	; (800138c <LL_TIM_Init+0xd0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <LL_TIM_Init+0x66>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001300:	d00f      	beq.n	8001322 <LL_TIM_Init+0x66>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a22      	ldr	r2, [pc, #136]	; (8001390 <LL_TIM_Init+0xd4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00b      	beq.n	8001322 <LL_TIM_Init+0x66>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a21      	ldr	r2, [pc, #132]	; (8001394 <LL_TIM_Init+0xd8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d007      	beq.n	8001322 <LL_TIM_Init+0x66>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a20      	ldr	r2, [pc, #128]	; (8001398 <LL_TIM_Init+0xdc>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d003      	beq.n	8001322 <LL_TIM_Init+0x66>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a1f      	ldr	r2, [pc, #124]	; (800139c <LL_TIM_Init+0xe0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d106      	bne.n	8001330 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff91 	bl	8001264 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff7d 	bl	8001248 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a0e      	ldr	r2, [pc, #56]	; (800138c <LL_TIM_Init+0xd0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00b      	beq.n	800136e <LL_TIM_Init+0xb2>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <LL_TIM_Init+0xd8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d007      	beq.n	800136e <LL_TIM_Init+0xb2>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <LL_TIM_Init+0xdc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d003      	beq.n	800136e <LL_TIM_Init+0xb2>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a0c      	ldr	r2, [pc, #48]	; (800139c <LL_TIM_Init+0xe0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d105      	bne.n	800137a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff83 	bl	8001280 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff8e 	bl	800129c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40012c00 	.word	0x40012c00
 8001390:	40000400 	.word	0x40000400
 8001394:	40014000 	.word	0x40014000
 8001398:	40014400 	.word	0x40014400
 800139c:	40014800 	.word	0x40014800

080013a0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <LL_InitTick+0x30>)
 80013b4:	3b01      	subs	r3, #1
 80013b6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <LL_InitTick+0x30>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <LL_InitTick+0x30>)
 80013c0:	2205      	movs	r2, #5
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80013dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ffdd 	bl	80013a0 <LL_InitTick>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <LL_mDelay+0x48>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80013fe:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001406:	d00c      	beq.n	8001422 <LL_mDelay+0x32>
  {
    Delay++;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3301      	adds	r3, #1
 800140c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800140e:	e008      	b.n	8001422 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <LL_mDelay+0x48>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <LL_mDelay+0x32>
    {
      Delay--;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f3      	bne.n	8001410 <LL_mDelay+0x20>
    }
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <LL_SetSystemCoreClock+0x1c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000000 	.word	0x20000000

0800145c <__libc_init_array>:
 800145c:	b570      	push	{r4, r5, r6, lr}
 800145e:	4d0d      	ldr	r5, [pc, #52]	; (8001494 <__libc_init_array+0x38>)
 8001460:	4c0d      	ldr	r4, [pc, #52]	; (8001498 <__libc_init_array+0x3c>)
 8001462:	1b64      	subs	r4, r4, r5
 8001464:	10a4      	asrs	r4, r4, #2
 8001466:	2600      	movs	r6, #0
 8001468:	42a6      	cmp	r6, r4
 800146a:	d109      	bne.n	8001480 <__libc_init_array+0x24>
 800146c:	4d0b      	ldr	r5, [pc, #44]	; (800149c <__libc_init_array+0x40>)
 800146e:	4c0c      	ldr	r4, [pc, #48]	; (80014a0 <__libc_init_array+0x44>)
 8001470:	f000 f818 	bl	80014a4 <_init>
 8001474:	1b64      	subs	r4, r4, r5
 8001476:	10a4      	asrs	r4, r4, #2
 8001478:	2600      	movs	r6, #0
 800147a:	42a6      	cmp	r6, r4
 800147c:	d105      	bne.n	800148a <__libc_init_array+0x2e>
 800147e:	bd70      	pop	{r4, r5, r6, pc}
 8001480:	f855 3b04 	ldr.w	r3, [r5], #4
 8001484:	4798      	blx	r3
 8001486:	3601      	adds	r6, #1
 8001488:	e7ee      	b.n	8001468 <__libc_init_array+0xc>
 800148a:	f855 3b04 	ldr.w	r3, [r5], #4
 800148e:	4798      	blx	r3
 8001490:	3601      	adds	r6, #1
 8001492:	e7f2      	b.n	800147a <__libc_init_array+0x1e>
 8001494:	080014e4 	.word	0x080014e4
 8001498:	080014e4 	.word	0x080014e4
 800149c:	080014e4 	.word	0x080014e4
 80014a0:	080014e8 	.word	0x080014e8

080014a4 <_init>:
 80014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a6:	bf00      	nop
 80014a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014aa:	bc08      	pop	{r3}
 80014ac:	469e      	mov	lr, r3
 80014ae:	4770      	bx	lr

080014b0 <_fini>:
 80014b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b2:	bf00      	nop
 80014b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014b6:	bc08      	pop	{r3}
 80014b8:	469e      	mov	lr, r3
 80014ba:	4770      	bx	lr
