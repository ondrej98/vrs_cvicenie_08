
vrs_cvicenie_08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001264  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080013ec  080013ec  000113ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001414  08001414  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001414  08001414  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001414  08001414  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001414  08001414  00011414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001418  08001418  00011418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800141c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000002c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008037  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001691  00000000  00000000  0002806b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000550  00000000  00000000  00029700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004a8  00000000  00000000  00029c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001664e  00000000  00000000  0002a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000533e  00000000  00000000  00040746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077491  00000000  00000000  00045a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000bcf15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000140c  00000000  00000000  000bcf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080013d4 	.word	0x080013d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080013d4 	.word	0x080013d4

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <resetSegments>:
extern DisplayDigitData_ DisplayDigit_0;
extern DisplayDigitData_ DisplayDigit_1;
extern DisplayDigitData_ DisplayDigit_2;
extern DisplayDigitData_ DisplayDigit_3;

void resetSegments(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	SEGMENT_A_OFF;
 8000204:	2102      	movs	r1, #2
 8000206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020a:	f7ff ffdd 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_B_OFF;
 800020e:	2101      	movs	r1, #1
 8000210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000214:	f7ff ffd8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_C_OFF;
 8000218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800021c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000220:	f7ff ffd2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_D_OFF;
 8000224:	2120      	movs	r1, #32
 8000226:	480c      	ldr	r0, [pc, #48]	; (8000258 <resetSegments+0x58>)
 8000228:	f7ff ffce 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_E_OFF;
 800022c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000234:	f7ff ffc8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_F_OFF;
 8000238:	2108      	movs	r1, #8
 800023a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023e:	f7ff ffc3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_G_OFF;
 8000242:	2110      	movs	r1, #16
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <resetSegments+0x58>)
 8000246:	f7ff ffbf 	bl	80001c8 <LL_GPIO_SetOutputPin>
	SEGMENT_DP_OFF;
 800024a:	2102      	movs	r1, #2
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <resetSegments+0x58>)
 800024e:	f7ff ffbb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	48000400 	.word	0x48000400

0800025c <resetDigits>:
	SEGMENT_F_ON;
	SEGMENT_G_ON;
	SEGMENT_DP_ON;
}

void resetDigits(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	DIGIT_0_OFF;
 8000260:	2120      	movs	r1, #32
 8000262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000266:	f7ff ffbd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	DIGIT_1_OFF;
 800026a:	2110      	movs	r1, #16
 800026c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000270:	f7ff ffb8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	DIGIT_2_OFF;
 8000274:	2140      	movs	r1, #64	; 0x40
 8000276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027a:	f7ff ffb3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	DIGIT_3_OFF;
 800027e:	2104      	movs	r1, #4
 8000280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000284:	f7ff ffae 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	DIGIT_TIME_OFF;
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028e:	f7ff ffa9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <segmentsOn>:
	DIGIT_2_ON;
	DIGIT_3_ON;
	DIGIT_TIME_ON;
}

void segmentsOn(uint8_t index, SegmentDigitStruct digitStruct) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	e883 0006 	stmia.w	r3, {r1, r2}
 80002a4:	4603      	mov	r3, r0
 80002a6:	73fb      	strb	r3, [r7, #15]
	resetSegments();
 80002a8:	f7ff ffaa 	bl	8000200 <resetSegments>
	if (digitStruct.sA)
 80002ac:	793b      	ldrb	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d004      	beq.n	80002bc <segmentsOn+0x24>
		SEGMENT_A_ON;
 80002b2:	2102      	movs	r1, #2
 80002b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b8:	f7ff ff94 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	if (digitStruct.sB)
 80002bc:	797b      	ldrb	r3, [r7, #5]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d004      	beq.n	80002cc <segmentsOn+0x34>
		SEGMENT_B_ON;
 80002c2:	2101      	movs	r1, #1
 80002c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c8:	f7ff ff8c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	if (digitStruct.sC)
 80002cc:	79bb      	ldrb	r3, [r7, #6]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d005      	beq.n	80002de <segmentsOn+0x46>
		SEGMENT_C_ON;
 80002d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002da:	f7ff ff83 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	if (digitStruct.sD)
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d003      	beq.n	80002ec <segmentsOn+0x54>
		SEGMENT_D_ON;
 80002e4:	2120      	movs	r1, #32
 80002e6:	4825      	ldr	r0, [pc, #148]	; (800037c <segmentsOn+0xe4>)
 80002e8:	f7ff ff7c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	if (digitStruct.sE)
 80002ec:	7a3b      	ldrb	r3, [r7, #8]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d005      	beq.n	80002fe <segmentsOn+0x66>
		SEGMENT_E_ON;
 80002f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fa:	f7ff ff73 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	if (digitStruct.sF)
 80002fe:	7a7b      	ldrb	r3, [r7, #9]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d004      	beq.n	800030e <segmentsOn+0x76>
		SEGMENT_F_ON;
 8000304:	2108      	movs	r1, #8
 8000306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030a:	f7ff ff6b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	if (digitStruct.sG)
 800030e:	7abb      	ldrb	r3, [r7, #10]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d003      	beq.n	800031c <segmentsOn+0x84>
		SEGMENT_G_ON;
 8000314:	2110      	movs	r1, #16
 8000316:	4819      	ldr	r0, [pc, #100]	; (800037c <segmentsOn+0xe4>)
 8000318:	f7ff ff64 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	if (digitStruct.sDot)
 800031c:	7afb      	ldrb	r3, [r7, #11]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d003      	beq.n	800032a <segmentsOn+0x92>
		SEGMENT_DP_ON;
 8000322:	2102      	movs	r1, #2
 8000324:	4815      	ldr	r0, [pc, #84]	; (800037c <segmentsOn+0xe4>)
 8000326:	f7ff ff5d 	bl	80001e4 <LL_GPIO_ResetOutputPin>

	resetDigits();
 800032a:	f7ff ff97 	bl	800025c <resetDigits>
	if (index == 0)
 800032e:	7bfb      	ldrb	r3, [r7, #15]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d105      	bne.n	8000340 <segmentsOn+0xa8>
		DIGIT_0_ON;
 8000334:	2120      	movs	r1, #32
 8000336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033a:	f7ff ff45 	bl	80001c8 <LL_GPIO_SetOutputPin>
		DIGIT_1_ON;
	else if (index == 2)
		DIGIT_2_ON;
	else if (index == 3)
		DIGIT_3_ON;
}
 800033e:	e019      	b.n	8000374 <segmentsOn+0xdc>
	else if (index == 1)
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d105      	bne.n	8000352 <segmentsOn+0xba>
		DIGIT_1_ON;
 8000346:	2110      	movs	r1, #16
 8000348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034c:	f7ff ff3c 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000350:	e010      	b.n	8000374 <segmentsOn+0xdc>
	else if (index == 2)
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	2b02      	cmp	r3, #2
 8000356:	d105      	bne.n	8000364 <segmentsOn+0xcc>
		DIGIT_2_ON;
 8000358:	2140      	movs	r1, #64	; 0x40
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035e:	f7ff ff33 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000362:	e007      	b.n	8000374 <segmentsOn+0xdc>
	else if (index == 3)
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	2b03      	cmp	r3, #3
 8000368:	d104      	bne.n	8000374 <segmentsOn+0xdc>
		DIGIT_3_ON;
 800036a:	2104      	movs	r1, #4
 800036c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000370:	f7ff ff2a 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	48000400 	.word	0x48000400

08000380 <displayCharOnDigit>:

void displayCharOnDigit(DisplayDigitData_ digitData) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	80b8      	strh	r0, [r7, #4]
	SegmentDigitStruct digitStruct = GetSegmentDigit(digitData.chr);
 8000388:	797a      	ldrb	r2, [r7, #5]
 800038a:	f107 0308 	add.w	r3, r7, #8
 800038e:	4611      	mov	r1, r2
 8000390:	4618      	mov	r0, r3
 8000392:	f000 f853 	bl	800043c <GetSegmentDigit>
	segmentsOn(digitData.index, digitStruct);
 8000396:	7938      	ldrb	r0, [r7, #4]
 8000398:	f107 0308 	add.w	r3, r7, #8
 800039c:	e893 0006 	ldmia.w	r3, {r1, r2}
 80003a0:	f7ff ff7a 	bl	8000298 <segmentsOn>
}
 80003a4:	bf00      	nop
 80003a6:	3710      	adds	r7, #16
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <updateDisplay>:
void updateDisplay(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	displayCharOnDigit(DisplayDigit_0);
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <updateDisplay+0x80>)
 80003b2:	781a      	ldrb	r2, [r3, #0]
 80003b4:	785b      	ldrb	r3, [r3, #1]
 80003b6:	021b      	lsls	r3, r3, #8
 80003b8:	431a      	orrs	r2, r3
 80003ba:	2300      	movs	r3, #0
 80003bc:	f362 030f 	bfi	r3, r2, #0, #16
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ffdd 	bl	8000380 <displayCharOnDigit>
	LL_mDelay(5);
 80003c6:	2005      	movs	r0, #5
 80003c8:	f000 ffaa 	bl	8001320 <LL_mDelay>
	displayCharOnDigit(DisplayDigit_1);
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <updateDisplay+0x84>)
 80003ce:	781a      	ldrb	r2, [r3, #0]
 80003d0:	785b      	ldrb	r3, [r3, #1]
 80003d2:	021b      	lsls	r3, r3, #8
 80003d4:	431a      	orrs	r2, r3
 80003d6:	2300      	movs	r3, #0
 80003d8:	f362 030f 	bfi	r3, r2, #0, #16
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff ffcf 	bl	8000380 <displayCharOnDigit>
	LL_mDelay(5);
 80003e2:	2005      	movs	r0, #5
 80003e4:	f000 ff9c 	bl	8001320 <LL_mDelay>
	displayCharOnDigit(DisplayDigit_2);
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <updateDisplay+0x88>)
 80003ea:	781a      	ldrb	r2, [r3, #0]
 80003ec:	785b      	ldrb	r3, [r3, #1]
 80003ee:	021b      	lsls	r3, r3, #8
 80003f0:	431a      	orrs	r2, r3
 80003f2:	2300      	movs	r3, #0
 80003f4:	f362 030f 	bfi	r3, r2, #0, #16
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ffc1 	bl	8000380 <displayCharOnDigit>
	LL_mDelay(5);
 80003fe:	2005      	movs	r0, #5
 8000400:	f000 ff8e 	bl	8001320 <LL_mDelay>
	displayCharOnDigit(DisplayDigit_3);
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <updateDisplay+0x8c>)
 8000406:	781a      	ldrb	r2, [r3, #0]
 8000408:	785b      	ldrb	r3, [r3, #1]
 800040a:	021b      	lsls	r3, r3, #8
 800040c:	431a      	orrs	r2, r3
 800040e:	2300      	movs	r3, #0
 8000410:	f362 030f 	bfi	r3, r2, #0, #16
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ffb3 	bl	8000380 <displayCharOnDigit>
	LL_mDelay(5);
 800041a:	2005      	movs	r0, #5
 800041c:	f000 ff80 	bl	8001320 <LL_mDelay>
	resetDigits();
 8000420:	f7ff ff1c 	bl	800025c <resetDigits>
	resetSegments();
 8000424:	f7ff feec 	bl	8000200 <resetSegments>
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	2000002c 	.word	0x2000002c
 8000430:	20000024 	.word	0x20000024
 8000434:	20000020 	.word	0x20000020
 8000438:	20000028 	.word	0x20000028

0800043c <GetSegmentDigit>:
		0x3B, // Y
		0x6D, // Z*
		0x08, // _
		};

SegmentDigitStruct GetSegmentDigit(uint8_t chr) {
 800043c:	b480      	push	{r7}
 800043e:	b087      	sub	sp, #28
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	SegmentDigitStruct result;
	if ((chr >= '0' && chr <= '9') || (chr >= 'A' && chr <= 'Z')
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	2b2f      	cmp	r3, #47	; 0x2f
 800044c:	d902      	bls.n	8000454 <GetSegmentDigit+0x18>
 800044e:	78fb      	ldrb	r3, [r7, #3]
 8000450:	2b39      	cmp	r3, #57	; 0x39
 8000452:	d908      	bls.n	8000466 <GetSegmentDigit+0x2a>
 8000454:	78fb      	ldrb	r3, [r7, #3]
 8000456:	2b40      	cmp	r3, #64	; 0x40
 8000458:	d902      	bls.n	8000460 <GetSegmentDigit+0x24>
 800045a:	78fb      	ldrb	r3, [r7, #3]
 800045c:	2b5a      	cmp	r3, #90	; 0x5a
 800045e:	d902      	bls.n	8000466 <GetSegmentDigit+0x2a>
			|| chr == '_') {
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	2b5f      	cmp	r3, #95	; 0x5f
 8000464:	d175      	bne.n	8000552 <GetSegmentDigit+0x116>
		uint8_t fontChar = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	75fb      	strb	r3, [r7, #23]
		uint8_t index = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	75bb      	strb	r3, [r7, #22]
		if (chr >= '0' && chr <= '9') {
 800046e:	78fb      	ldrb	r3, [r7, #3]
 8000470:	2b2f      	cmp	r3, #47	; 0x2f
 8000472:	d90a      	bls.n	800048a <GetSegmentDigit+0x4e>
 8000474:	78fb      	ldrb	r3, [r7, #3]
 8000476:	2b39      	cmp	r3, #57	; 0x39
 8000478:	d807      	bhi.n	800048a <GetSegmentDigit+0x4e>
			index = chr - '0';
 800047a:	78fb      	ldrb	r3, [r7, #3]
 800047c:	3b30      	subs	r3, #48	; 0x30
 800047e:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_DIGITS_START + index];
 8000480:	7dbb      	ldrb	r3, [r7, #22]
 8000482:	4a3a      	ldr	r2, [pc, #232]	; (800056c <GetSegmentDigit+0x130>)
 8000484:	5cd3      	ldrb	r3, [r2, r3]
 8000486:	75fb      	strb	r3, [r7, #23]
 8000488:	e013      	b.n	80004b2 <GetSegmentDigit+0x76>
		} else if (chr >= 'A' && chr <= 'Z') {
 800048a:	78fb      	ldrb	r3, [r7, #3]
 800048c:	2b40      	cmp	r3, #64	; 0x40
 800048e:	d90b      	bls.n	80004a8 <GetSegmentDigit+0x6c>
 8000490:	78fb      	ldrb	r3, [r7, #3]
 8000492:	2b5a      	cmp	r3, #90	; 0x5a
 8000494:	d808      	bhi.n	80004a8 <GetSegmentDigit+0x6c>
			index = chr - 'A';
 8000496:	78fb      	ldrb	r3, [r7, #3]
 8000498:	3b41      	subs	r3, #65	; 0x41
 800049a:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_CHARS_START + index];
 800049c:	7dbb      	ldrb	r3, [r7, #22]
 800049e:	330a      	adds	r3, #10
 80004a0:	4a32      	ldr	r2, [pc, #200]	; (800056c <GetSegmentDigit+0x130>)
 80004a2:	5cd3      	ldrb	r3, [r2, r3]
 80004a4:	75fb      	strb	r3, [r7, #23]
 80004a6:	e004      	b.n	80004b2 <GetSegmentDigit+0x76>
		} else if (chr == '_') {
 80004a8:	78fb      	ldrb	r3, [r7, #3]
 80004aa:	2b5f      	cmp	r3, #95	; 0x5f
 80004ac:	d101      	bne.n	80004b2 <GetSegmentDigit+0x76>
			fontChar = Font_Table[FONTS_UNDERSCORE];
 80004ae:	2308      	movs	r3, #8
 80004b0:	75fb      	strb	r3, [r7, #23]
		}
		result.sA = fontChar & ConverterValue_SegmentA ? true : false;
 80004b2:	2240      	movs	r2, #64	; 0x40
 80004b4:	7dfb      	ldrb	r3, [r7, #23]
 80004b6:	4013      	ands	r3, r2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	bf14      	ite	ne
 80004be:	2301      	movne	r3, #1
 80004c0:	2300      	moveq	r3, #0
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	733b      	strb	r3, [r7, #12]
		result.sB = fontChar & ConverterValue_SegmentB ? true : false;
 80004c6:	2220      	movs	r2, #32
 80004c8:	7dfb      	ldrb	r3, [r7, #23]
 80004ca:	4013      	ands	r3, r2
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	bf14      	ite	ne
 80004d2:	2301      	movne	r3, #1
 80004d4:	2300      	moveq	r3, #0
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	737b      	strb	r3, [r7, #13]
		result.sC = fontChar & ConverterValue_SegmentC ? true : false;
 80004da:	2210      	movs	r2, #16
 80004dc:	7dfb      	ldrb	r3, [r7, #23]
 80004de:	4013      	ands	r3, r2
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	bf14      	ite	ne
 80004e6:	2301      	movne	r3, #1
 80004e8:	2300      	moveq	r3, #0
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	73bb      	strb	r3, [r7, #14]
		result.sD = fontChar & ConverterValue_SegmentD ? true : false;
 80004ee:	2208      	movs	r2, #8
 80004f0:	7dfb      	ldrb	r3, [r7, #23]
 80004f2:	4013      	ands	r3, r2
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	bf14      	ite	ne
 80004fa:	2301      	movne	r3, #1
 80004fc:	2300      	moveq	r3, #0
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	73fb      	strb	r3, [r7, #15]
		result.sE = fontChar & ConverterValue_SegmentE ? true : false;
 8000502:	2204      	movs	r2, #4
 8000504:	7dfb      	ldrb	r3, [r7, #23]
 8000506:	4013      	ands	r3, r2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	bf14      	ite	ne
 800050e:	2301      	movne	r3, #1
 8000510:	2300      	moveq	r3, #0
 8000512:	b2db      	uxtb	r3, r3
 8000514:	743b      	strb	r3, [r7, #16]
		result.sF = fontChar & ConverterValue_SegmentF ? true : false;
 8000516:	2202      	movs	r2, #2
 8000518:	7dfb      	ldrb	r3, [r7, #23]
 800051a:	4013      	ands	r3, r2
 800051c:	b2db      	uxtb	r3, r3
 800051e:	2b00      	cmp	r3, #0
 8000520:	bf14      	ite	ne
 8000522:	2301      	movne	r3, #1
 8000524:	2300      	moveq	r3, #0
 8000526:	b2db      	uxtb	r3, r3
 8000528:	747b      	strb	r3, [r7, #17]
		result.sG = fontChar & ConverterValue_SegmentG ? true : false;
 800052a:	2201      	movs	r2, #1
 800052c:	7dfb      	ldrb	r3, [r7, #23]
 800052e:	4013      	ands	r3, r2
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	bf14      	ite	ne
 8000536:	2301      	movne	r3, #1
 8000538:	2300      	moveq	r3, #0
 800053a:	b2db      	uxtb	r3, r3
 800053c:	74bb      	strb	r3, [r7, #18]
		result.sDot = fontChar & ConverterValue_SegmentDot ? true : false;
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	7dfb      	ldrb	r3, [r7, #23]
 8000542:	4013      	ands	r3, r2
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	bf14      	ite	ne
 800054a:	2301      	movne	r3, #1
 800054c:	2300      	moveq	r3, #0
 800054e:	b2db      	uxtb	r3, r3
 8000550:	74fb      	strb	r3, [r7, #19]
	}
	return result;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	461a      	mov	r2, r3
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	cb03      	ldmia	r3!, {r0, r1}
 800055c:	6010      	str	r0, [r2, #0]
 800055e:	6051      	str	r1, [r2, #4]
}
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	371c      	adds	r7, #28
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	080013ec 	.word	0x080013ec

08000570 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	4907      	ldr	r1, [pc, #28]	; (800059c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4313      	orrs	r3, r2
 8000582:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000586:	695a      	ldr	r2, [r3, #20]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000

080005a0 <LL_GPIO_ResetOutputPin>:
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
 80005d0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80005d2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80005d6:	f7ff ffcb 	bl	8000570 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80005da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80005de:	f7ff ffc7 	bl	8000570 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80005e2:	f640 11ff 	movw	r1, #2559	; 0x9ff
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f7ff ffd9 	bl	80005a0 <LL_GPIO_ResetOutputPin>
                          |D_1_Pin|D_0_Pin|D_2_Pin|D_T_Pin
                          |S_C_Pin|S_E_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, S_DP_Pin|S_G_Pin|S_D_Pin);
 80005ee:	2132      	movs	r1, #50	; 0x32
 80005f0:	4813      	ldr	r0, [pc, #76]	; (8000640 <MX_GPIO_Init+0x84>)
 80005f2:	f7ff ffd5 	bl	80005a0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80005f6:	f640 13ff 	movw	r3, #2559	; 0x9ff
 80005fa:	603b      	str	r3, [r7, #0]
                          |D_1_Pin|D_0_Pin|D_2_Pin|D_T_Pin
                          |S_C_Pin|S_E_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005fc:	2301      	movs	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	463b      	mov	r3, r7
 800060e:	4619      	mov	r1, r3
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f000 fd40 	bl	8001098 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = S_DP_Pin|S_G_Pin|S_D_Pin;
 8000618:	2332      	movs	r3, #50	; 0x32
 800061a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800061c:	2301      	movs	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <MX_GPIO_Init+0x84>)
 8000632:	f000 fd31 	bl	8001098 <LL_GPIO_Init>

}
 8000636:	bf00      	nop
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	48000400 	.word	0x48000400

08000644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800066c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	f003 0307 	and.w	r3, r3, #7
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
         );
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <LL_RCC_HSI_Enable+0x1c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <LL_RCC_HSI_Enable+0x1c>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6013      	str	r3, [r2, #0]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000

08000784 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <LL_RCC_HSI_IsReady+0x20>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f003 0302 	and.w	r3, r3, #2
 8000790:	2b02      	cmp	r3, #2
 8000792:	bf0c      	ite	eq
 8000794:	2301      	moveq	r3, #1
 8000796:	2300      	movne	r3, #0
 8000798:	b2db      	uxtb	r3, r3
}
 800079a:	4618      	mov	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	40021000 	.word	0x40021000

080007a8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	4904      	ldr	r1, [pc, #16]	; (80007d0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007be:	4313      	orrs	r3, r2
 80007c0:	600b      	str	r3, [r1, #0]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <LL_RCC_SetSysClkSource+0x24>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f023 0203 	bic.w	r2, r3, #3
 80007e4:	4904      	ldr	r1, [pc, #16]	; (80007f8 <LL_RCC_SetSysClkSource+0x24>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	604b      	str	r3, [r1, #4]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40021000 	.word	0x40021000

080007fc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <LL_RCC_GetSysClkSource+0x18>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	f003 030c 	and.w	r3, r3, #12
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <LL_RCC_SetAHBPrescaler+0x24>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000828:	4904      	ldr	r1, [pc, #16]	; (800083c <LL_RCC_SetAHBPrescaler+0x24>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4313      	orrs	r3, r2
 800082e:	604b      	str	r3, [r1, #4]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	40021000 	.word	0x40021000

08000840 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <LL_RCC_SetAPB1Prescaler+0x24>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000850:	4904      	ldr	r1, [pc, #16]	; (8000864 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4313      	orrs	r3, r2
 8000856:	604b      	str	r3, [r1, #4]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	40021000 	.word	0x40021000

08000868 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000878:	4904      	ldr	r1, [pc, #16]	; (800088c <LL_RCC_SetAPB2Prescaler+0x24>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4313      	orrs	r3, r2
 800087e:	604b      	str	r3, [r1, #4]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000

08000890 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800089a:	69da      	ldr	r2, [r3, #28]
 800089c:	4907      	ldr	r1, [pc, #28]	; (80008bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80008a6:	69da      	ldr	r2, [r3, #28]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4013      	ands	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	40021000 	.word	0x40021000

080008c0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80008ca:	699a      	ldr	r2, [r3, #24]
 80008cc:	4907      	ldr	r1, [pc, #28]	; (80008ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80008d6:	699a      	ldr	r2, [r3, #24]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4013      	ands	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000

080008f0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <LL_FLASH_SetLatency+0x24>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f023 0207 	bic.w	r2, r3, #7
 8000900:	4904      	ldr	r1, [pc, #16]	; (8000914 <LL_FLASH_SetLatency+0x24>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	600b      	str	r3, [r1, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	40022000 	.word	0x40022000

08000918 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <LL_FLASH_GetLatency+0x18>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 0307 	and.w	r3, r3, #7
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40022000 	.word	0x40022000

08000934 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	DisplayDigit_0.index = 0;
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <main+0xb8>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
	DisplayDigit_0.chr = 0;
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <main+0xb8>)
 8000940:	2200      	movs	r2, #0
 8000942:	705a      	strb	r2, [r3, #1]
	DisplayDigit_1.index = 1;
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <main+0xbc>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
	DisplayDigit_1.chr = 0;
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <main+0xbc>)
 800094c:	2200      	movs	r2, #0
 800094e:	705a      	strb	r2, [r3, #1]
	DisplayDigit_2.index = 2;
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <main+0xc0>)
 8000952:	2202      	movs	r2, #2
 8000954:	701a      	strb	r2, [r3, #0]
	DisplayDigit_2.chr = 0;
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <main+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	705a      	strb	r2, [r3, #1]
	DisplayDigit_3.index = 3;
 800095c:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <main+0xc4>)
 800095e:	2203      	movs	r2, #3
 8000960:	701a      	strb	r2, [r3, #0]
	DisplayDigit_3.chr = 0;
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <main+0xc4>)
 8000964:	2200      	movs	r2, #0
 8000966:	705a      	strb	r2, [r3, #1]

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff ffa9 	bl	80008c0 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800096e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000972:	f7ff ff8d 	bl	8000890 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000976:	2003      	movs	r0, #3
 8000978:	f7ff fe64 	bl	8000644 <__NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn,
 800097c:	f7ff fe86 	bl	800068c <__NVIC_GetPriorityGrouping>
 8000980:	4603      	mov	r3, r0
 8000982:	2200      	movs	r2, #0
 8000984:	210f      	movs	r1, #15
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff feb8 	bl	80006fc <NVIC_EncodePriority>
 800098c:	4603      	mov	r3, r0
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f7ff fe88 	bl	80006a8 <__NVIC_SetPriority>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000998:	f000 f830 	bl	80009fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800099c:	f7ff fe0e 	bl	80005bc <MX_GPIO_Init>
	MX_TIM6_Init();
 80009a0:	f000 f9cc 	bl	8000d3c <MX_TIM6_Init>
	MX_TIM7_Init();
 80009a4:	f000 fa0a 	bl	8000dbc <MX_TIM7_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		LL_mDelay(2000);
 80009a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009ac:	f000 fcb8 	bl	8001320 <LL_mDelay>
		DisplayDigit_0.chr = 'A';
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <main+0xb8>)
 80009b2:	2241      	movs	r2, #65	; 0x41
 80009b4:	705a      	strb	r2, [r3, #1]
		DisplayDigit_1.chr = '0';
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <main+0xbc>)
 80009b8:	2230      	movs	r2, #48	; 0x30
 80009ba:	705a      	strb	r2, [r3, #1]
		DisplayDigit_2.chr = '_';
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <main+0xc0>)
 80009be:	225f      	movs	r2, #95	; 0x5f
 80009c0:	705a      	strb	r2, [r3, #1]
		DisplayDigit_3.chr = 'K';
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <main+0xc4>)
 80009c4:	224b      	movs	r2, #75	; 0x4b
 80009c6:	705a      	strb	r2, [r3, #1]
		LL_mDelay(2000);
 80009c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009cc:	f000 fca8 	bl	8001320 <LL_mDelay>
		DisplayDigit_0.chr = '9';
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <main+0xb8>)
 80009d2:	2239      	movs	r2, #57	; 0x39
 80009d4:	705a      	strb	r2, [r3, #1]
		DisplayDigit_1.chr = 'X';
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <main+0xbc>)
 80009d8:	2258      	movs	r2, #88	; 0x58
 80009da:	705a      	strb	r2, [r3, #1]
		DisplayDigit_2.chr = '_';
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <main+0xc0>)
 80009de:	225f      	movs	r2, #95	; 0x5f
 80009e0:	705a      	strb	r2, [r3, #1]
		DisplayDigit_3.chr = '0';
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <main+0xc4>)
 80009e4:	2230      	movs	r2, #48	; 0x30
 80009e6:	705a      	strb	r2, [r3, #1]
		LL_mDelay(2000);
 80009e8:	e7de      	b.n	80009a8 <main+0x74>
 80009ea:	bf00      	nop
 80009ec:	2000002c 	.word	0x2000002c
 80009f0:	20000024 	.word	0x20000024
 80009f4:	20000020 	.word	0x20000020
 80009f8:	20000028 	.word	0x20000028

080009fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ff75 	bl	80008f0 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 8000a06:	bf00      	nop
 8000a08:	f7ff ff86 	bl	8000918 <LL_FLASH_GetLatency>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1fa      	bne.n	8000a08 <SystemClock_Config+0xc>
	}
	LL_RCC_HSI_Enable();
 8000a12:	f7ff fea7 	bl	8000764 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 8000a16:	bf00      	nop
 8000a18:	f7ff feb4 	bl	8000784 <LL_RCC_HSI_IsReady>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d1fa      	bne.n	8000a18 <SystemClock_Config+0x1c>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8000a22:	2010      	movs	r0, #16
 8000a24:	f7ff fec0 	bl	80007a8 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f7ff fef5 	bl	8000818 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff ff06 	bl	8000840 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff ff17 	bl	8000868 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff feca 	bl	80007d4 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8000a40:	bf00      	nop
 8000a42:	f7ff fedb 	bl	80007fc <LL_RCC_GetSysClkSource>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1fa      	bne.n	8000a42 <SystemClock_Config+0x46>

	}
	LL_Init1msTick(8000000);
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <SystemClock_Config+0x60>)
 8000a4e:	f000 fc59 	bl	8001304 <LL_Init1msTick>
	LL_SetSystemCoreClock(8000000);
 8000a52:	4802      	ldr	r0, [pc, #8]	; (8000a5c <SystemClock_Config+0x60>)
 8000a54:	f000 fc8a 	bl	800136c <LL_SetSystemCoreClock>
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	007a1200 	.word	0x007a1200

08000a60 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f06f 0201 	mvn.w	r2, #1
 8000a6e:	611a      	str	r2, [r3, #16]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d101      	bne.n	8000a94 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000a90:	2301      	movs	r3, #1
 8000a92:	e000      	b.n	8000a96 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000aa6:	e7fe      	b.n	8000aa6 <NMI_Handler+0x4>

08000aa8 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000aac:	e7fe      	b.n	8000aac <HardFault_Handler+0x4>

08000aae <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000ab2:	e7fe      	b.n	8000ab2 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000ab8:	e7fe      	b.n	8000ab8 <BusFault_Handler+0x4>

08000aba <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000abe:	e7fe      	b.n	8000abe <UsageFault_Handler+0x4>

08000ac0 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <TIM6_DAC1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
 */
void TIM6_DAC1_IRQHandler(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC1_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6)) {
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <TIM6_DAC1_IRQHandler+0x20>)
 8000afe:	f7ff ffbd 	bl	8000a7c <LL_TIM_IsActiveFlag_UPDATE>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <TIM6_DAC1_IRQHandler+0x14>
		updateDisplay();
 8000b08:	f7ff fc50 	bl	80003ac <updateDisplay>
	}
	/* USER CODE END TIM6_DAC1_IRQn 0 */

	/* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

	LL_TIM_ClearFlag_UPDATE(TIM6);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <TIM6_DAC1_IRQHandler+0x20>)
 8000b0e:	f7ff ffa7 	bl	8000a60 <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40001000 	.word	0x40001000

08000b1c <TIM7_DAC2_IRQHandler>:

/**
 * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
 */
void TIM7_DAC2_IRQHandler(void) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM7_DAC2_IRQn 0 */

	/* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

	/* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_EnableIRQ>:
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db0b      	blt.n	8000b96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f003 021f 	and.w	r2, r3, #31
 8000b84:	4907      	ldr	r1, [pc, #28]	; (8000ba4 <__NVIC_EnableIRQ+0x38>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <LL_APB1_GRP1_EnableClock>:
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c6e:	69da      	ldr	r2, [r3, #28]
 8000c70:	4907      	ldr	r1, [pc, #28]	; (8000c90 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c7a:	69da      	ldr	r2, [r3, #28]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000

08000c94 <LL_TIM_EnableCounter>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f043 0201 	orr.w	r2, r3, #1
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_TIM_DisableARRPreload>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <LL_TIM_SetTriggerOutput>:
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	605a      	str	r2, [r3, #4]
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LL_TIM_DisableMasterSlaveMode>:
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	f043 0201 	orr.w	r2, r3, #1
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60da      	str	r2, [r3, #12]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <MX_TIM6_Init>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8000d50:	2010      	movs	r0, #16
 8000d52:	f7ff ff87 	bl	8000c64 <LL_APB1_GRP1_EnableClock>

	/* TIM6 interrupt Init */
	NVIC_SetPriority(TIM6_DAC1_IRQn,
 8000d56:	f7ff fefb 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff4b 	bl	8000bfc <NVIC_EncodePriority>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4619      	mov	r1, r3
 8000d6a:	2036      	movs	r0, #54	; 0x36
 8000d6c:	f7ff ff1c 	bl	8000ba8 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000d70:	2036      	movs	r0, #54	; 0x36
 8000d72:	f7ff fefb 	bl	8000b6c <__NVIC_EnableIRQ>

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	TIM_InitStruct.Prescaler = 7999;
 8000d76:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8000d7a:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 19;
 8000d80:	2313      	movs	r3, #19
 8000d82:	60fb      	str	r3, [r7, #12]
	LL_TIM_Init(TIM6, &TIM_InitStruct);
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <MX_TIM6_Init+0x7c>)
 8000d8a:	f000 fa2f 	bl	80011ec <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM6);
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <MX_TIM6_Init+0x7c>)
 8000d90:	f7ff ff90 	bl	8000cb4 <LL_TIM_DisableARRPreload>
	LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8000d94:	2100      	movs	r1, #0
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <MX_TIM6_Init+0x7c>)
 8000d98:	f7ff ff9c 	bl	8000cd4 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM6);
 8000d9c:	4806      	ldr	r0, [pc, #24]	; (8000db8 <MX_TIM6_Init+0x7c>)
 8000d9e:	f7ff ffac 	bl	8000cfa <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM6_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM6);
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_TIM6_Init+0x7c>)
 8000da4:	f7ff ffb9 	bl	8000d1a <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM6);
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <MX_TIM6_Init+0x7c>)
 8000daa:	f7ff ff73 	bl	8000c94 <LL_TIM_EnableCounter>
	/* USER CODE END TIM6_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40001000 	.word	0x40001000

08000dbc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8000dd0:	2020      	movs	r0, #32
 8000dd2:	f7ff ff47 	bl	8000c64 <LL_APB1_GRP1_EnableClock>

	/* TIM7 interrupt Init */
	NVIC_SetPriority(TIM7_DAC2_IRQn,
 8000dd6:	f7ff febb 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff0b 	bl	8000bfc <NVIC_EncodePriority>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4619      	mov	r1, r3
 8000dea:	2037      	movs	r0, #55	; 0x37
 8000dec:	f7ff fedc 	bl	8000ba8 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8000df0:	2037      	movs	r0, #55	; 0x37
 8000df2:	f7ff febb 	bl	8000b6c <__NVIC_EnableIRQ>

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	TIM_InitStruct.Prescaler = 7999;
 8000df6:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8000dfa:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 499;
 8000e00:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000e04:	60fb      	str	r3, [r7, #12]
	LL_TIM_Init(TIM7, &TIM_InitStruct);
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <MX_TIM7_Init+0x7c>)
 8000e0c:	f000 f9ee 	bl	80011ec <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM7);
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <MX_TIM7_Init+0x7c>)
 8000e12:	f7ff ff4f 	bl	8000cb4 <LL_TIM_DisableARRPreload>
	LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8000e16:	2100      	movs	r1, #0
 8000e18:	4807      	ldr	r0, [pc, #28]	; (8000e38 <MX_TIM7_Init+0x7c>)
 8000e1a:	f7ff ff5b 	bl	8000cd4 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM7);
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_TIM7_Init+0x7c>)
 8000e20:	f7ff ff6b 	bl	8000cfa <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM7_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM7);
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_TIM7_Init+0x7c>)
 8000e26:	f7ff ff78 	bl	8000d1a <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM7);
 8000e2a:	4803      	ldr	r0, [pc, #12]	; (8000e38 <MX_TIM7_Init+0x7c>)
 8000e2c:	f7ff ff32 	bl	8000c94 <LL_TIM_EnableCounter>
	/* USER CODE END TIM7_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40001400 	.word	0x40001400

08000e3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e42:	490e      	ldr	r1, [pc, #56]	; (8000e7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <LoopForever+0xe>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e58:	4c0b      	ldr	r4, [pc, #44]	; (8000e88 <LoopForever+0x16>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e66:	f7ff fe61 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f000 fa8f 	bl	800138c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6e:	f7ff fd61 	bl	8000934 <main>

08000e72 <LoopForever>:

LoopForever:
    b LoopForever
 8000e72:	e7fe      	b.n	8000e72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e74:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000e80:	0800141c 	.word	0x0800141c
  ldr r2, =_sbss
 8000e84:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000e88:	20000030 	.word	0x20000030

08000e8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC1_2_IRQHandler>

08000e8e <LL_GPIO_SetPinMode>:
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b089      	sub	sp, #36	; 0x24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa93 f3a3 	rbit	r3, r3
 8000ec8:	61bb      	str	r3, [r7, #24]
  return result;
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	fab3 f383 	clz	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	431a      	orrs	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	3724      	adds	r7, #36	; 0x24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <LL_GPIO_SetPinOutputType>:
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	401a      	ands	r2, r3
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	fb01 f303 	mul.w	r3, r1, r3
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	605a      	str	r2, [r3, #4]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_GPIO_SetPinSpeed>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	613b      	str	r3, [r7, #16]
  return result;
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	fab3 f383 	clz	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2103      	movs	r1, #3
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	fa93 f3a3 	rbit	r3, r3
 8000f56:	61bb      	str	r3, [r7, #24]
  return result;
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fab3 f383 	clz	r3, r3
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	609a      	str	r2, [r3, #8]
}
 8000f6e:	bf00      	nop
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <LL_GPIO_SetPinPull>:
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b089      	sub	sp, #36	; 0x24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	613b      	str	r3, [r7, #16]
  return result;
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	fab3 f383 	clz	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2103      	movs	r1, #3
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	401a      	ands	r2, r3
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	61bb      	str	r3, [r7, #24]
  return result;
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	fab3 f383 	clz	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	60da      	str	r2, [r3, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3724      	adds	r7, #36	; 0x24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_GPIO_SetAFPin_0_7>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6a1a      	ldr	r2, [r3, #32]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	613b      	str	r3, [r7, #16]
  return result;
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	210f      	movs	r1, #15
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	401a      	ands	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	61bb      	str	r3, [r7, #24]
  return result;
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fab3 f383 	clz	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	431a      	orrs	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	621a      	str	r2, [r3, #32]
}
 800102a:	bf00      	nop
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_GPIO_SetAFPin_8_15>:
{
 8001036:	b480      	push	{r7}
 8001038:	b089      	sub	sp, #36	; 0x24
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	613b      	str	r3, [r7, #16]
  return result;
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	fab3 f383 	clz	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	210f      	movs	r1, #15
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	401a      	ands	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa93 f3a3 	rbit	r3, r3
 8001074:	61bb      	str	r3, [r7, #24]
  return result;
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	fab3 f383 	clz	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	431a      	orrs	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800108c:	bf00      	nop
 800108e:	3724      	adds	r7, #36	; 0x24
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa93 f3a3 	rbit	r3, r3
 80010ae:	613b      	str	r3, [r7, #16]
  return result;
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	fab3 f383 	clz	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80010ba:	e051      	b.n	8001160 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2101      	movs	r1, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d043      	beq.n	800115a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d003      	beq.n	80010e2 <LL_GPIO_Init+0x4a>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d10e      	bne.n	8001100 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	461a      	mov	r2, r3
 80010e8:	69b9      	ldr	r1, [r7, #24]
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ff16 	bl	8000f1c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	6819      	ldr	r1, [r3, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	461a      	mov	r2, r3
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fef6 	bl	8000eec <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	461a      	mov	r2, r3
 8001106:	69b9      	ldr	r1, [r7, #24]
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff36 	bl	8000f7a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d11a      	bne.n	800114c <LL_GPIO_Init+0xb4>
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	fa93 f3a3 	rbit	r3, r3
 8001120:	60bb      	str	r3, [r7, #8]
  return result;
 8001122:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001124:	fab3 f383 	clz	r3, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b07      	cmp	r3, #7
 800112c:	d807      	bhi.n	800113e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	461a      	mov	r2, r3
 8001134:	69b9      	ldr	r1, [r7, #24]
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff4e 	bl	8000fd8 <LL_GPIO_SetAFPin_0_7>
 800113c:	e006      	b.n	800114c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	461a      	mov	r2, r3
 8001144:	69b9      	ldr	r1, [r7, #24]
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff75 	bl	8001036 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	461a      	mov	r2, r3
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fe9a 	bl	8000e8e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	fa22 f303 	lsr.w	r3, r2, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1a6      	bne.n	80010bc <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <LL_TIM_SetPrescaler>:
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_TIM_SetAutoReload>:
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_TIM_SetRepetitionCounter>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	615a      	str	r2, [r3, #20]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <LL_TIM_Init+0xd0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d007      	beq.n	8001214 <LL_TIM_Init+0x28>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120a:	d003      	beq.n	8001214 <LL_TIM_Init+0x28>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a2c      	ldr	r2, [pc, #176]	; (80012c0 <LL_TIM_Init+0xd4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d106      	bne.n	8001222 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4313      	orrs	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a25      	ldr	r2, [pc, #148]	; (80012bc <LL_TIM_Init+0xd0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <LL_TIM_Init+0x66>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001230:	d00f      	beq.n	8001252 <LL_TIM_Init+0x66>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <LL_TIM_Init+0xd4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00b      	beq.n	8001252 <LL_TIM_Init+0x66>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <LL_TIM_Init+0xd8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <LL_TIM_Init+0x66>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a20      	ldr	r2, [pc, #128]	; (80012c8 <LL_TIM_Init+0xdc>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d003      	beq.n	8001252 <LL_TIM_Init+0x66>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a1f      	ldr	r2, [pc, #124]	; (80012cc <LL_TIM_Init+0xe0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d106      	bne.n	8001260 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	4619      	mov	r1, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff91 	bl	8001194 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff7d 	bl	8001178 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <LL_TIM_Init+0xd0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00b      	beq.n	800129e <LL_TIM_Init+0xb2>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <LL_TIM_Init+0xd8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <LL_TIM_Init+0xb2>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <LL_TIM_Init+0xdc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d003      	beq.n	800129e <LL_TIM_Init+0xb2>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <LL_TIM_Init+0xe0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d105      	bne.n	80012aa <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	4619      	mov	r1, r3
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff83 	bl	80011b0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff8e 	bl	80011cc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40012c00 	.word	0x40012c00
 80012c0:	40000400 	.word	0x40000400
 80012c4:	40014000 	.word	0x40014000
 80012c8:	40014400 	.word	0x40014400
 80012cc:	40014800 	.word	0x40014800

080012d0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4a07      	ldr	r2, [pc, #28]	; (8001300 <LL_InitTick+0x30>)
 80012e4:	3b01      	subs	r3, #1
 80012e6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <LL_InitTick+0x30>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <LL_InitTick+0x30>)
 80012f0:	2205      	movs	r2, #5
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e010 	.word	0xe000e010

08001304 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800130c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ffdd 	bl	80012d0 <LL_InitTick>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <LL_mDelay+0x48>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800132e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001336:	d00c      	beq.n	8001352 <LL_mDelay+0x32>
  {
    Delay++;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3301      	adds	r3, #1
 800133c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800133e:	e008      	b.n	8001352 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <LL_mDelay+0x48>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <LL_mDelay+0x32>
    {
      Delay--;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f3      	bne.n	8001340 <LL_mDelay+0x20>
    }
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <LL_SetSystemCoreClock+0x1c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000000 	.word	0x20000000

0800138c <__libc_init_array>:
 800138c:	b570      	push	{r4, r5, r6, lr}
 800138e:	4d0d      	ldr	r5, [pc, #52]	; (80013c4 <__libc_init_array+0x38>)
 8001390:	4c0d      	ldr	r4, [pc, #52]	; (80013c8 <__libc_init_array+0x3c>)
 8001392:	1b64      	subs	r4, r4, r5
 8001394:	10a4      	asrs	r4, r4, #2
 8001396:	2600      	movs	r6, #0
 8001398:	42a6      	cmp	r6, r4
 800139a:	d109      	bne.n	80013b0 <__libc_init_array+0x24>
 800139c:	4d0b      	ldr	r5, [pc, #44]	; (80013cc <__libc_init_array+0x40>)
 800139e:	4c0c      	ldr	r4, [pc, #48]	; (80013d0 <__libc_init_array+0x44>)
 80013a0:	f000 f818 	bl	80013d4 <_init>
 80013a4:	1b64      	subs	r4, r4, r5
 80013a6:	10a4      	asrs	r4, r4, #2
 80013a8:	2600      	movs	r6, #0
 80013aa:	42a6      	cmp	r6, r4
 80013ac:	d105      	bne.n	80013ba <__libc_init_array+0x2e>
 80013ae:	bd70      	pop	{r4, r5, r6, pc}
 80013b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013b4:	4798      	blx	r3
 80013b6:	3601      	adds	r6, #1
 80013b8:	e7ee      	b.n	8001398 <__libc_init_array+0xc>
 80013ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80013be:	4798      	blx	r3
 80013c0:	3601      	adds	r6, #1
 80013c2:	e7f2      	b.n	80013aa <__libc_init_array+0x1e>
 80013c4:	08001414 	.word	0x08001414
 80013c8:	08001414 	.word	0x08001414
 80013cc:	08001414 	.word	0x08001414
 80013d0:	08001418 	.word	0x08001418

080013d4 <_init>:
 80013d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d6:	bf00      	nop
 80013d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013da:	bc08      	pop	{r3}
 80013dc:	469e      	mov	lr, r3
 80013de:	4770      	bx	lr

080013e0 <_fini>:
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e2:	bf00      	nop
 80013e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e6:	bc08      	pop	{r3}
 80013e8:	469e      	mov	lr, r3
 80013ea:	4770      	bx	lr
